import streamlit as st

from simplex import simplex, solve_integer

def show_instructions():
    st.title("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é")
    st.markdown("""
    ### –ö–∞–∫ –∑–∞–¥–∞—Ç—å –∑–∞–¥–∞—á—É

    1. **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:**  
       * –ú–∞–∫—Å–∏–º—É–º ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å  
       * –ú–∏–Ω–∏–º—É–º ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–º–Ω–æ–∂–∞—é—Ç—Å—è –Ω–∞ -1

    2. **–í–≤–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:**  
       * –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫: ‚â§, ‚â• –∏–ª–∏ =  
       * –í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

    3. **–§–æ—Ä–º–∞—Ç:**  
       * –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ (x‚ÇÅ ‚â• 0, x‚ÇÇ ‚â• 0, ...)

    4. **–ü—Ä–∏–º–µ—Ä:**  
       ```
       min Z = 2x‚ÇÅ + 3x‚ÇÇ
       x‚ÇÅ + x‚ÇÇ ‚â• 4
       2x‚ÇÅ + x‚ÇÇ ‚â§ 10
       ```
       –í –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –≤—ã–±–µ—Ä–∏—Ç–µ "–ú–∏–Ω–∏–º—É–º", –∑–∞–¥–∞–π—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏,  
       –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ ‚â•, –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ ‚Äî ‚â§.

    5. **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**  
       * –î–ª—è –∑–∞–¥–∞—á–∏ –Ω–∞ –º–∏–Ω–∏–º—É–º –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ.
       * –ò—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π —Å–∏–º–ø–ª–µ–∫—Å-–º–µ—Ç–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.

    """)


def main():
    st.set_page_config(
        page_title="–°–∏–º–ø–ª–µ–∫—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
        page_icon="üßÆ",
    )
    tabs = st.tabs(["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])

    with tabs[0]:
        st.title("–°–∏–º–ø–ª–µ–∫—Å –º–µ—Ç–æ–¥")

        method = st.selectbox("–ú–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è", ["–°–∏–º–ø–ª–µ–∫—Å", "–í–µ—Ç–≤–ª–µ–Ω–∏–µ –∏ –≥—Ä–∞–Ω–∏—Ü—ã (BnB)"])

        # –ù–æ–≤—ã–π –≤—ã–±–æ—Ä: –º–∞–∫—Å–∏–º—É–º/–º–∏–Ω–∏–º—É–º
        opt_type = st.radio("–¢–∏–ø –∑–∞–¥–∞—á–∏", ["–ú–∞–∫—Å–∏–º—É–º", "–ú–∏–Ω–∏–º—É–º"], horizontal=True)

        # Input dimensions
        col1, col2 = st.columns(2)
        with col1:
            n_vars = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", min_value=1, max_value=8, value=3)
        with col2:
            n_constraints = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", min_value=1, max_value=6, value=2)

        # Input for objective function
        st.subheader("–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
        obj_coeffs = []
        cols = st.columns(int(n_vars))
        for i in range(n_vars):
            with cols[i]:
                coef = st.number_input(f"x{i+1}", key=f"obj_{i}")
                obj_coeffs.append(coef)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∏–Ω–∏–º—É–º–∞
        if opt_type == "–ú–∏–Ω–∏–º—É–º":
            obj_coeffs = [-c for c in obj_coeffs]

        # Input for constraints
        st.subheader("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
        A = []
        b = []
        senses = []
        for i in range(n_constraints):
            st.write(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {i+1}")
            row = []
            cols = st.columns(n_vars + 2)
            for j in range(n_vars):
                with cols[j]:
                    coef = st.number_input(f"x{j+1}", key=f"cons_{i}_{j}")
                    row.append(coef)
            with cols[-2]:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã ‚â§, ‚â•, =
                sense = st.selectbox("–¢–∏–ø", options=["‚â§", "‚â•", "="], key=f"sense_{i}")
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è simplex
                sense_map = {"‚â§": "<=", "‚â•": ">=", "=": "=="}
                sense_std = sense_map[sense]
            with cols[-1]:
                rhs = st.number_input("–ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å", key=f"rhs_{i}")
            A.append(row)
            b.append(rhs)
            senses.append(sense_std)

        if st.button("–†–µ—à–∏—Ç—å"):
            if method == "–°–∏–º–ø–ª–µ–∫—Å":
                result = simplex(obj_coeffs, A, b, senses)
            else:
                result, x_int = solve_integer(obj_coeffs, A, b, senses)

            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")

            if result.status == 'optimal':
                st.success("–ù–∞–π–¥–µ–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!")
                st.write("–ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
                if method == "–°–∏–º–ø–ª–µ–∫—Å":
                    for i, val in enumerate(result.x):
                        if abs(val) > 1e-8:
                            st.write(f"x{i+1} = {val:.4f}")
                    # –î–ª—è –º–∏–Ω–∏–º—É–º–∞ –º–µ–Ω—è–µ–º –∑–Ω–∞–∫ –æ–±—Ä–∞—Ç–Ω–æ
                    if opt_type == "–ú–∏–Ω–∏–º—É–º":
                        st.write(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {-result.objective:.4f}")
                    else:
                        st.write(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {result.objective:.4f}")
                    if getattr(result, "alternative", False):
                        st.info("–°—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π")
                else:
                    for i, val in enumerate(result.x):
                        st.write(f"x{i+1} = {val}")
                    if opt_type == "–ú–∏–Ω–∏–º—É–º":
                        st.write(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {-result.objective:.4f}")
                    else:
                        st.write(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {result.objective:.4f}")
            else:
                st.error({
                    'infeasible': "–ó–∞–¥–∞—á–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–Ω–∞ (–Ω–µ—Ç —Ä–µ—à–µ–Ω–∏–π)",
                    'unbounded': "–ó–∞–¥–∞—á–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ (—Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)",
                }.get(result.status, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ"))

            # –ò—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π ‚Äî –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
            if hasattr(result, "history") and result.history:
                st.subheader("–ò—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π")
                for i, tab in enumerate(result.history):
                    with st.expander(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i}"):
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ + "b"
                        headers = [f"x{j+1}" for j in range(n_vars)]
                        headers += [f"s{j+1}" for j in range(len(tab[0]) - n_vars - 1)]
                        headers.append("b")
                        # –ò–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ Z
                        index = [f"–û–≥—Ä. {j+1}" for j in range(len(tab)-1)]
                        index.append("Z")
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                        formatted_tab = [[f"{x:.4f}" for x in row] for row in tab]
                        # –°–æ–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        table_data = {
                            "": index,
                            **{headers[j]: [row[j] for row in formatted_tab]
                               for j in range(len(headers))}
                        }
                        st.dataframe(table_data)

    with tabs[1]:
        show_instructions()

if __name__ == "__main__":
    main()
