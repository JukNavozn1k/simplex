import streamlit as st

from simplex import simplex, solve_integer

def show_instructions():
    st.title("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é")
    st.markdown("""
    ### –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –∫ —Ä–µ—à–µ–Ω–∏—é

    1. **–î–ª—è –∑–∞–¥–∞—á–∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏:**
       * –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–º–Ω–æ–∂–∏—Ç—å —Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ -1
       * –ü—Ä–∏–º–µ—Ä: min Z = 2x‚ÇÅ + 3x‚ÇÇ ‚Üí max Z = -2x‚ÇÅ - 3x‚ÇÇ

    2. **–î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç–∏–ø–∞ ‚â§ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞):**
       * –°–∏–º–ø–ª–µ–∫—Å –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –≤–∏–¥–∞ ‚â§
       * –ï—Å–ª–∏ —É –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–∏–¥–∞ ‚â•, –¥–æ–º–Ω–æ–∂—å—Ç–µ –µ–≥–æ –Ω–∞ -1
       * –ü—Ä–∏–º–µ—Ä: x‚ÇÅ + x‚ÇÇ ‚â• 4 ‚Üí -x‚ÇÅ - x‚ÇÇ ‚â§ -4
    
    ### –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:
    ```
    min Z = 2x‚ÇÅ + 3x‚ÇÇ
    x‚ÇÅ + x‚ÇÇ ‚â• 4      | √ó (-1)
    2x‚ÇÅ + x‚ÇÇ ‚â§ 10    | –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    ```
    
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤:
    ```
    max Z = -2x‚ÇÅ - 3x‚ÇÇ
    -x‚ÇÅ - x‚ÇÇ ‚â§ -4
    2x‚ÇÅ + x‚ÇÇ ‚â§ 10
    ```
    """)


def main():
    st.set_page_config(
        page_title="–°–∏–º–ø–ª–µ–∫—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
        page_icon="üßÆ",
    )
    tabs = st.tabs(["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])

    with tabs[0]:
        st.title("–°–∏–º–ø–ª–µ–∫—Å –º–µ—Ç–æ–¥")

        # –ú–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è ‚Äî –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        method = st.selectbox("–ú–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è", ["–°–∏–º–ø–ª–µ–∫—Å", "–í–µ—Ç–≤–ª–µ–Ω–∏–µ –∏ –≥—Ä–∞–Ω–∏—Ü—ã (BnB)"])

        # Input dimensions
        col1, col2 = st.columns(2)
        with col1:
            n_vars = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", min_value=1, max_value=8, value=3)
        with col2:
            n_constraints = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", min_value=1, max_value=6, value=2)

        # Input for objective function
        st.subheader("–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
        obj_coeffs = []
        cols = st.columns(int(n_vars))
        for i in range(n_vars):
            with cols[i]:
                coef = st.number_input(f"x{i+1}", key=f"obj_{i}")
                obj_coeffs.append(coef)

        # Input for constraints
        st.subheader("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
        A = []
        b = []
        for i in range(n_constraints):
            st.write(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {i+1}")
            row = []
            cols = st.columns(n_vars + 1)
            for j in range(n_vars):
                with cols[j]:
                    coef = st.number_input(f"x{j+1}", key=f"cons_{i}_{j}")
                    row.append(coef)
            with cols[-1]:
                rhs = st.number_input("‚â§", key=f"rhs_{i}")
            A.append(row)
            b.append(rhs)

        if st.button("–†–µ—à–∏—Ç—å"):
            if method == "–°–∏–º–ø–ª–µ–∫—Å":
                result = simplex(obj_coeffs, A, b)
            else:
                result, x_int = solve_integer(obj_coeffs, A, b)

            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")

            if result.status == 'optimal':
                st.success("–ù–∞–π–¥–µ–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!")
                st.write("–ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
                if method == "–°–∏–º–ø–ª–µ–∫—Å":
                    for i, val in enumerate(result.x):
                        if abs(val) > 1e-8:
                            st.write(f"x{i+1} = {val:.4f}")
                    st.write(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {result.objective:.4f}")
                    if getattr(result, "alternative", False):
                        st.info("–°—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π")
                else:
                    for i, val in enumerate(result.x):
                        st.write(f"x{i+1} = {val}")
                    st.write(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {result.objective:.4f}")
            else:
                st.error({
                    'infeasible': "–ó–∞–¥–∞—á–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–Ω–∞ (–Ω–µ—Ç —Ä–µ—à–µ–Ω–∏–π)",
                    'unbounded': "–ó–∞–¥–∞—á–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ (—Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)",
                }.get(result.status, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ"))

            # –ò—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π ‚Äî –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
            if hasattr(result, "history") and result.history:
                st.subheader("–ò—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π")
                for i, tab in enumerate(result.history):
                    with st.expander(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i}"):
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ + "b"
                        headers = [f"x{j+1}" for j in range(n_vars)]
                        headers += [f"s{j+1}" for j in range(len(tab[0]) - n_vars - 1)]
                        headers.append("b")
                        # –ò–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ Z
                        index = [f"–û–≥—Ä. {j+1}" for j in range(len(tab)-1)]
                        index.append("Z")
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                        formatted_tab = [[f"{x:.4f}" for x in row] for row in tab]
                        # –°–æ–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        table_data = {
                            "": index,
                            **{headers[j]: [row[j] for row in formatted_tab]
                               for j in range(len(headers))}
                        }
                        st.dataframe(table_data)

    with tabs[1]:
        show_instructions()

if __name__ == "__main__":
    main()
